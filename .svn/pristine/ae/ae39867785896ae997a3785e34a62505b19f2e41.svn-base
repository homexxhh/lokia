#-*— coding:UTF-8 -*-
#/usr/bin/env python
"""
module descript
"""
import hashlib
from django.http import HttpResponse
from django.template import RequestContext
from django.views.generic import TemplateView
from django.views.decorators import csrf
from django.shortcuts import render_to_response
from lib.utils import parse_request
from lib.response import BaseResponse
import menu
import token
import qrcode


class IndexView(TemplateView):

    def get(self, request, *args, **kwargs):
        result = menu.create_menu()
        return HttpResponse(result)


@csrf.csrf_exempt
def check_signature(request):
    signature = request.GET.get("signature", None)
    timestamp = request.GET.get("timestamp", None)
    nonce = request.GET.get("nonce", None)
    echo_str = request.GET.get("echostr", None)
    tok = token.TOKEN
    tmp_list = [tok, timestamp, nonce]
    tmp_list.sort()
    tmp_str = "%s%s%s" % tuple(tmp_list)
    tmp_str = hashlib.sha1(tmp_str).hexdigest()
    if tmp_str == signature:
        response = HttpResponse(echo_str, mimetype="text/plain")
        return response
    else:
        return HttpResponse(None, mimetype='text/plain')


@qrcode.ensure_ticket_effective
def qr_code(request):
    return HttpResponse(qrcode.get_qrcode(), mimetype="image/jpeg")


@csrf.csrf_exempt
@parse_request
def response_msg(msg):
    resp = BaseResponse(msg)
    if(msg['Content'].strip().startswith('#')):
        pass
    else:
        context = {'Content': '如果在消息前面加上#，那么我就可以回复客服消息'}
        return resp.get_response(context)


@csrf.csrf_exempt
def customer_msg(request):
    pass

@csrf.csrf_exempt
def get_customer_msg(request):
    pass








